require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do

  before(:all) do
    @email = "test@test.com"
    @payload = { email: @email, exp: Time.now.to_i + 3600 }
    @token = JWT.encode(@payload, ENV["JWT_KEY"], "HS512")
  end
  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email: @email,
      password: "password",
      username: "test_user"
    }
  }

  let(:invalid_attributes) {
    {
      foo: "bar",
      # too short
      username: "foo"
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    {
      "Authorization": "Bearer #{@token}"
    }
  }

  describe "GET /index" do
    it "renders a successful response with valid headers" do
      User.create! valid_attributes
      get users_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response with valid headers" do
      user = User.create! valid_attributes
      get user_url(user), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /register" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post register_user_url,
               params: valid_attributes, as: :json
        }.to change(User, :count).by(1)
      end

      it "renders a JSON response with a valid token" do
        post register_user_url,
             params: valid_attributes, as: :json
        token = response.parsed_body["token"]
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
        expect(JWT.decode(token, ENV["JWT_KEY"], true, { algorithm: "HS512" })[0]).to be_truthy
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post register_user_url,
               params: invalid_attributes, as: :json
        }.to change(User, :count).by(0)
      end

      it "renders a JSON response with errors for the new user" do
        post register_user_url,
             params: invalid_attributes , headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          email: @email,
          username: "edited_test_user"
        }
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        patch user_url(user),
              params: { user: new_attributes }, headers: valid_headers, as: :json
        user.reload
        expect(user.valid?).to be true
      end

      it "renders a JSON response with the user" do
        user = User.create! valid_attributes
        patch user_url(user),
              params: { user: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the user" do
        user = User.create! valid_attributes
        patch user_url(user),
              params: invalid_attributes, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end
end
